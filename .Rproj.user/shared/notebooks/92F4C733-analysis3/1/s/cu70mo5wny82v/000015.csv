"0","library(dplyr)"
"0",""
"0","# Find Continuous and Categorical Features"
"0","featureType <- function(df) {"
"0","  colTypeBase <- vector()"
"0","  colType <- vector()"
"0","  "
"0","  for (col in names(df)) {"
"0","    tryCatch({"
"0","      uniq <- df %>% pull({{ col }}) %>% unique() %>% length()"
"0","      if (nrow(df) > 10) {"
"0","        if (is.numeric(df[[col]])) {"
"0","          if (uniq == 1) {"
"0","            colType <- append(colType, ""Unary"")"
"0","            colTypeBase <- append(colTypeBase, ""Unary"")"
"0","          } else if (uniq == 2) {"
"0","            colType <- append(colType, ""Binary"")"
"0","            colTypeBase <- append(colTypeBase, ""Binary"")"
"0","          } else if (nrow(df) / uniq > 3 & uniq > 5) {"
"0","            colType <- append(colType, ""Continuous"")"
"0","            colTypeBase <- append(colTypeBase, ""Continuous"")"
"0","          } else {"
"0","            colType <- append(colType, ""Continuous-Ordinal"")"
"0","            colTypeBase <- append(colTypeBase, ""Ordinal"")"
"0","          }"
"0","        } else {"
"0","          if (uniq == 1) {"
"0","            colType <- append(colType, ""Unary"")"
"0","            colTypeBase <- append(colTypeBase, ""Category-Unary"")"
"0","          } else if (uniq == 2) {"
"0","            colType <- append(colType, ""Binary"")"
"0","            colTypeBase <- append(colTypeBase, ""Category-Binary"")"
"0","          } else {"
"0","            colType <- append(colType, ""Categorical-Nominal"")"
"0","            colTypeBase <- append(colTypeBase, ""Nominal"")"
"0","          }"
"0","        }"
"0","      } else {"
"0","        if (is.numeric(df[[col]])) {"
"0","          colType <- append(colType, ""Numeric"")"
"0","          colTypeBase <- append(colTypeBase, ""Numeric"")"
"0","        } else {"
"0","          colType <- append(colType, ""Non-numeric"")"
"0","          colTypeBase <- append(colTypeBase, ""Non-numeric"")"
"0","        }"
"0","      }"
"0","    }, error = function(e) {"
"0","      colType <- append(colType, ""Issue"")"
"0","    })"
"0","  }"
"0","  "
"0","  # Create dataframe"
"0","  df_out <- tibble("
"0","    Feature = names(df),"
"0","    BaseFeatureType = colTypeBase,"
"0","    AnalysisFeatureType = colType"
"0","  )"
"0","  "
"0","  return(df_out)"
"0","}"
"0",""
"0","featureType(model_df)"
