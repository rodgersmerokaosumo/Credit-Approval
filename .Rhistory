mutate_if(is.character, as.factor)
summary(df)
# Check for missing values and clean the data
missing_values <- df %>%
summarize_all(~ sum(is.na(.)))
missing_values
# Filter numerical columns
num_cols <- df %>%
select(where(is.numeric)) %>%
names()
# Define a function to handle outliers
handle_outliers <- function(col) {
# Calculate quartiles and IQR
q1 <- quantile(col, 0.25)
q3 <- quantile(col, 0.75)
iqr <- q3 - q1
# Define lower and upper bounds for outliers
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
# Replace outliers with NA
col <- ifelse(col < lower_bound | col > upper_bound, NA, col)
# Return the modified column
return(col)
}
# Handle outliers in each numerical column
data_outliers_removed <- df %>%
mutate(across(num_cols, handle_outliers))
# Display the updated summary of the dataset
summary(data_outliers_removed)
library(dplyr)
credit_card_first_month <- df %>%
group_by(ID) %>%
summarize(start_month = min(MONTHS_BALANCE)) %>%
ungroup()
head(credit_card_first_month)
library(dplyr)
library(lubridate)
credit_card_first_month <- credit_card_first_month %>%
mutate(account_open_month = as.Date("2020-01-01")) %>%
mutate(account_open_month = account_open_month + months(start_month)) %>%
mutate(account_open_month = format(account_open_month, "%b-%Y"))
credit_card_first_month |> head()
library(dplyr)
credit_start_status <- left_join(credit_card_first_month, credit_record, by = "ID") %>%
mutate(start_month = abs(start_month) + MONTHS_BALANCE)
credit_start_status |> head()
credit_start_status %>%
count(STATUS)
accounts_counts <- credit_start_status %>%
count(start_month) %>%
as_tibble()
ggplot(accounts_counts, aes(x = start_month, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "start_month", y = "Count") +
theme_minimal()+ theme_light()
month_status_counts <- credit_start_status %>%
count(start_month, STATUS) %>%
rename(counts = n)
month_counts <- credit_start_status %>%
count(start_month) %>%
rename(month_counts = n)
month_status_pct <- month_status_counts %>%
left_join(month_counts, by = "start_month") %>%
mutate(status_pct = counts / month_counts * 100) %>%
select(start_month, STATUS, status_pct)
month_status_pct1 <- month_status_pct %>%
pivot_wider(names_from = STATUS, values_from = status_pct) %>%
replace(is.na(.), 0) %>%
mutate(start_month = as.character(start_month))
ggplot(month_status_pct1, aes(x = start_month, y = `4` + `5`)) +
geom_line(color = "steelblue", size = 2) +
geom_point(color = "steelblue", size = 1) +
labs(x = "Months Since Opened", y = "% Bad Rate")+ theme_minimal()
credit_record %>%
count(STATUS)
credit_start_status %>%
group_by(STATUS) %>%
summarize(count = n())
credit_start_status1 <- credit_start_status %>%
filter(STATUS != 'X' & STATUS != 'C')
credit_start_status1 <- credit_start_status1 %>%
mutate(status = STATUS)
credit_start_status1 <- credit_start_status1 %>%
filter(start_month <= 18,
status != 'C',
status != 'X') %>%
select(ID, start_month, status)
credit_start_status1
status <- credit_start_status1 %>%
group_by(ID) %>%
summarize(max_status = max(status)) %>%
ungroup()
status_summary <- status %>%
group_by(max_status) %>%
summarize(count = n())
status_summary
status <- status %>%
mutate(label = ifelse(as.integer(max_status) >= 4, 1, 0)) %>%
ungroup()
status_summary <- status %>%
group_by(label) %>%
summarize(count = n())
status_summary
status_summary <- status %>%
group_by(label) %>%
summarize(count = n()) %>%
mutate(percentage = count / length(status$label) * 100)
status_summary
label_1 <- status %>%
filter(label == 1)
label_0 <- status %>%
filter(label == 0)
label_0_biased <- label_0 %>%
sample_n(1701, replace = FALSE)
labels_biased <- bind_rows(label_1, label_0_biased) %>%
select(ID, label)
labels_biased |> head()
model_df <- merge(labels_biased, application_record, by = "ID", all = FALSE)
nrow(model_df)
model_df |> tail()
label_percent <- table(model_df$label) * 100 / length(model_df$label)
label_percent
missing_values_table <- function(df) {
df %>%
summarise_all(~ sum(is.na(.))) %>%
gather(key = "Column", value = "Missing_Values") %>%
mutate(`%_of_Total_Values` = 100 * Missing_Values / nrow(df)) %>%
filter(Missing_Values > 0) %>%
arrange(desc(`%_of_Total_Values`)) %>%
select(Column, Missing_Values, `%_of_Total_Values`)
}
missing_values_table(df)
library(tidyr)
library(purrr)
featureType <- function(df) {
df %>%
summarise_all(~ {
uniq <- n_distinct(.)
if (nrow(df) > 10) {
if (is.numeric(.)) {
if (uniq == 1) {
'Unary'
} else if (uniq == 2) {
'Binary'
} else if (nrow(df) / uniq > 3 && uniq > 5) {
'Continuous'
} else {
'Continuous-Ordinal'
}
} else {
if (uniq == 1) {
'Unary'
} else if (uniq == 2) {
'Binary'
} else {
'Categorical-Nominal'
}
}
} else {
if (is.numeric(.)) {
'Numeric'
} else {
'Non-numeric'
}
}
}) %>%
gather(key = 'Feature', value = 'BaseFeatureType') %>%
mutate(AnalysisFeatureType = case_when(
grepl('^Unary$', BaseFeatureType) ~ BaseFeatureType,
grepl('^Binary$', BaseFeatureType) ~ BaseFeatureType,
grepl('^Continuous', BaseFeatureType) ~ 'Continuous',
grepl('^Categorical', BaseFeatureType) ~ 'Categorical-Nominal',
TRUE ~ BaseFeatureType
)) %>%
select(Feature, BaseFeatureType, AnalysisFeatureType)
}
featureType(df)
library(dplyr)
model_df <- merge(model_df, credit_card_first_month %>% select(ID, account_open_month), by = "ID")
nrow(model_df)
# Set the seed for reproducibility
set.seed(123)
model_df$label <- as.factor(model_df$label)
# Split the data into a training set and a testing set
data_split <- initial_split(model_df, prop = 0.7)
train_data <- training(data_split)
test_data <- testing(data_split)
# Check for missing values
na <- model_df %>%
summarise_all(~sum(is.na(.)))
na
# Clean the data (assuming you want to remove rows with missing values)
clean_data <- model_df %>%
drop_na()
# Clean the data (assuming you want to remove rows with missing values)
clean_data <- model_df %>%
drop_na()
# Split the data into a training set and testing set
set.seed(123)  # For reproducibility
train_indices <- sample(nrow(clean_data), floor(0.7 * nrow(clean_data)))
train_data <- clean_data[train_indices, ]
test_data <- clean_data[-train_indices, ]
# Define the formula for the logistic regression model
formula <- formula(label ~. )
# Run the logistic regression model
model <- glm(formula, data = train_data, family = binomial)
# Interpret the results
summary(model)
# Split the data into a training set and testing set
set.seed(123)  # For reproducibility
train_indices <- sample(nrow(model_df2), floor(0.7 * nrow(model_df2)))
train_data <- model_df2[train_indices, ]
test_data <- model_df2[-train_indices, ]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(fastDummies)
library(lubridate)
library(tidyr)
library(tidymodels)
library(gains)
library(car)
library(ROCR)
library(reshape2)
library(readr)
library(gridExtra)
application_record <- read_csv("application_record.csv")
credit_record <- read_csv("credit_record.csv")
# Join the two data frames by the ID column
df <- inner_join(application_record , credit_record, by = "ID")
df |> glimpse()
# Convert all character columns to factor
application_record= application_record %>%
mutate_if(is.character, as.factor)
credit_record = credit_record %>%
mutate_if(is.character, as.factor)
# Convert specific columns to factors
application_record <-  application_record %>%
mutate(across(c(FLAG_WORK_PHONE, FLAG_PHONE, FLAG_EMAIL), factor))
application_record |> glimpse()
credit_record |> glimpse()
summary(application_record)
out_df <- credit_record %>%
group_by(MONTHS_BALANCE) %>%
summarise(counts = n(),
percent = n() * 100 / nrow(credit_record)) %>%
ungroup()
# Plotting using ggplot
ggplot(out_df, aes(x = MONTHS_BALANCE, y = percent)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Months Balance", y = "Percentage") +
ggtitle("Credit Status Distribution by Months Balance")+theme_light()
library(dplyr)
library(tidyr)
pivot_df <- out_df %>%
pivot_wider(names_from = MONTHS_BALANCE, values_from = c(counts, percent))
# View the pivot table
t(pivot_df)
library(dplyr)
credit_card_first_month <- credit_record %>%
group_by(ID) %>%
summarise(start_month = min(MONTHS_BALANCE)) %>%
ungroup()
# View the credit_card_first_month data
credit_card_first_month |> head()
reference_date <- as.Date("2020-01-01")  # Set the reference date
credit_card_first_month <- credit_card_first_month %>%
mutate(account_open_month = reference_date +
months(as.numeric(start_month))) %>%
mutate(account_open_month = format(account_open_month, format = "%b-%Y"))
# View the updated credit_card_first_month data
credit_card_first_month |> head()
library(dplyr)
credit_card_first_month <- credit_record %>%
group_by(ID) %>%
summarize(start_month = min(MONTHS_BALANCE)) %>%
ungroup()
head(credit_card_first_month)
credit_card_first_month <- credit_card_first_month %>%
mutate(account_open_month = as.Date("2020-01-01")) %>%
mutate(account_open_month = account_open_month + months(start_month)) %>%
mutate(account_open_month = format(account_open_month, "%b-%Y"))
credit_card_first_month |> head()
credit_start_status <- left_join(credit_card_first_month, credit_record, by = "ID") %>%
mutate(start_month = abs(start_month) + MONTHS_BALANCE)
credit_start_status |> head()
credit_start_status %>%
count(STATUS)
# Count the occurrences of each STATUS category
status_counts <- credit_start_status %>%
count(STATUS)
# Create a bar plot
ggplot(status_counts, aes(x = STATUS, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "STATUS", y = "Count", title = "Counts of Each STATUS Category") + theme_minimal()
# Create a dataframe with counts of start_month
accounts_counts <- credit_start_status %>%
count(start_month)
# Create a bar plot
ggplot(accounts_counts, aes(x = start_month, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Start Month", y = "Count", title = "Counts of Accounts by Start Month") + theme_minimal()
# Calculate counts by start_month and STATUS
month_status_counts <- credit_start_status %>%
group_by(start_month, STATUS) %>%
summarise(counts = n()) %>%
ungroup()
# Calculate counts by start_month
month_counts <- credit_start_status %>%
group_by(start_month) %>%
summarise(month_counts = n()) %>%
ungroup()
# Join the tables
month_status_pct <- left_join(month_status_counts, month_counts, by = "start_month")
# Calculate the status_pct
month_status_pct <- month_status_pct %>%
mutate(status_pct = counts / month_counts * 100) %>%
select(start_month, STATUS, status_pct)
library(tidyr)
# Reshape the data
month_status_pct1 <- month_status_pct %>%
pivot_wider(names_from = STATUS, values_from = status_pct, values_fill = 0) %>%
ungroup() %>%
select(start_month, everything()) %>%
na.omit()
# Create the plot
ggplot(month_status_pct1, aes(x = start_month, y = `4` + `5`)) +
geom_line(color = "steelblue", linetype = "solid", linewidth = 2) +
geom_point(color = "steelblue", size = 1.5) +
labs(x = "Months Since Opened", y = "% Bad Rate")+theme_minimal()
# Count the occurrences of each status
status_counts <- count(credit_start_status, STATUS)
# Remove rows with status 'C' and 'X'
credit_start_status1 <- credit_start_status %>%
filter(STATUS != 'C' & STATUS != 'X')
# Change status to numeric
credit_start_status1$status <- as.integer(credit_start_status1$STATUS)
# Filter rows with start month less than or equal to 18
credit_start_status1 <- credit_start_status1 %>%
filter(start_month <= 18) %>%
select(ID, start_month, status)
credit_start_status1 |> tail()
status <- credit_start_status1 %>%
group_by(ID) %>%
summarise(max_status = max(status)) %>%
ungroup()
# Validate
status_counts <- count(status, max_status)
status_counts
status$label <- ifelse(status$max_status >= 4, 1, 0)
# Validate
label_counts <- count(status, label)
label_counts
bad_rate <- prop.table(table(status$label)) * 100
bad_rate
label_1 <- subset(status, label == 1)
label_0 <- subset(status, label == 0)
label_0_biased <- label_0[sample(nrow(label_0), 1701), ]
labels_biased <- rbind(label_1, label_0_biased)
labels_biased <- subset(labels_biased, select = c("ID", "label"))
labels_biased |> tail()
model_df <- inner_join(labels_biased, application_record, by = "ID")
nrow(model_df)
model_df |> tail()
model_df %>%
count(label) %>%
mutate(percentage = n / sum(n) * 100)
model_df |> glimpse()
summary(model_df)
missing_values_table <- function(df) {
mis_val <- df %>%
summarise_all(~ sum(is.na(.))) %>%
t() %>%
as.data.frame() %>%
rename(Missing_Values = V1)
mis_val_percent <- df %>%
summarise_all(~ mean(is.na(.)) * 100) %>%
t() %>%
as.data.frame() %>%
rename(`% of Total Values` = V1)
mis_val_table <- bind_cols(mis_val, mis_val_percent)
mis_val_table_ren_columns <- mis_val_table %>%
filter(`% of Total Values` != 0) %>%
arrange(desc(`% of Total Values`))
cat(paste("Your selected dataframe has", ncol(df), "columns.\n",
"There are", nrow(mis_val_table_ren_columns), "columns that have missing values.\n"))
return(mis_val_table_ren_columns)
}
# Call the function
missing_values_table(model_df)
library(dplyr)
# Find Continuous and Categorical Features
featureType <- function(df) {
colTypeBase <- vector()
colType <- vector()
for (col in names(df)) {
tryCatch({
uniq <- df %>% pull({{ col }}) %>% unique() %>% length()
if (nrow(df) > 10) {
if (is.numeric(df[[col]])) {
if (uniq == 1) {
colType <- append(colType, "Unary")
colTypeBase <- append(colTypeBase, "Unary")
} else if (uniq == 2) {
colType <- append(colType, "Binary")
colTypeBase <- append(colTypeBase, "Binary")
} else if (nrow(df) / uniq > 3 & uniq > 5) {
colType <- append(colType, "Continuous")
colTypeBase <- append(colTypeBase, "Continuous")
} else {
colType <- append(colType, "Continuous-Ordinal")
colTypeBase <- append(colTypeBase, "Ordinal")
}
} else {
if (uniq == 1) {
colType <- append(colType, "Unary")
colTypeBase <- append(colTypeBase, "Category-Unary")
} else if (uniq == 2) {
colType <- append(colType, "Binary")
colTypeBase <- append(colTypeBase, "Category-Binary")
} else {
colType <- append(colType, "Categorical-Nominal")
colTypeBase <- append(colTypeBase, "Nominal")
}
}
} else {
if (is.numeric(df[[col]])) {
colType <- append(colType, "Numeric")
colTypeBase <- append(colTypeBase, "Numeric")
} else {
colType <- append(colType, "Non-numeric")
colTypeBase <- append(colTypeBase, "Non-numeric")
}
}
}, error = function(e) {
colType <- append(colType, "Issue")
})
}
# Create dataframe
df_out <- tibble(
Feature = names(df),
BaseFeatureType = colTypeBase,
AnalysisFeatureType = colType
)
return(df_out)
}
featureType(model_df)
library(lubridate)
model_df <- model_df %>%
mutate(BIRTH_DATE = as.Date("2020-01-01") + days(DAYS_BIRTH),
DAYS_EMPLOYED = ifelse(DAYS_EMPLOYED > 0, 31, DAYS_EMPLOYED),
EMPLOYMENT_START_DATE = as.Date("2020-01-01") + days(DAYS_EMPLOYED))
head(model_df)
model_df <- merge(model_df, credit_card_first_month %>% select(ID, account_open_month), by = "ID", all.x = TRUE)
nrow(model_df)
# Convert date columns to appropriate formats
model_df <- model_df %>%
mutate(BIRTH_DATE = as.Date(BIRTH_DATE),
EMPLOYMENT_START_DATE = as.Date(EMPLOYMENT_START_DATE),
account_open_month = as.Date(paste0("01-", account_open_month), format = "%d-%b-%Y"))
# Age in months
model_df <- model_df %>%
mutate(age_months = floor(as.numeric(difftime(account_open_month, BIRTH_DATE, units = "days")) / 30))
# Experience/Employment in Months
model_df <- model_df %>%
mutate(employment_months = floor(as.numeric(difftime(account_open_month, EMPLOYMENT_START_DATE, units = "days")) / 30))
head(model_df)
model_df <- model_df %>%
mutate(employment_months = ifelse(employment_months < 0, -1, employment_months))
model_df <- model_df %>%
select(-BIRTH_DATE, -EMPLOYMENT_START_DATE, -account_open_month, -DAYS_BIRTH, -DAYS_EMPLOYED, -FLAG_MOBIL)
featureType(model_df)
library(tidyr)
# Calculate counts for each income type and label
income_type <- model_df %>%
count(NAME_INCOME_TYPE, label) %>%
pivot_wider(names_from = label, values_from = n, names_prefix = "Label_") %>%
replace(is.na(.), 0)
# Calculate the total observations for each income type
income_type <- income_type %>%
mutate(pct_obs = (Label_0 + Label_1) / sum(Label_0 + Label_1))
# Calculate the percentage of label 0 for each income type
income_type <- income_type %>%
mutate(pct_label_0 = Label_0 / (Label_0 + Label_1))
# Calculate the percentage of label 1 for each income type
income_type <- income_type %>%
mutate(pct_label_1 = Label_1 / (Label_0 + Label_1))
# Print the resulting dataframe
print(income_type)
# Change missing value for OCCUPATION_TYPE
model_df$OCCUPATION_TYPE[model_df$OCCUPATION_TYPE == ""] <- "NA"
# One-hot Encoding using dummy_cols function from tidyr package
library(tidyr)
model_df2 <- dummy_cols(model_df, select_columns = c('CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'OCCUPATION_TYPE'))
nrow(model_df2)
# Features - exclude ID and Label columns
features <- model_df2[, -(1:2)]
# Label - select only label column
label <- model_df2[, 2]
# Split the data into a training set and testing set
set.seed(123)  # For reproducibility
train_indices <- sample(nrow(model_df2), floor(0.7 * nrow(model_df2)))
train_data <- model_df2[train_indices, ]
test_data <- model_df2[-train_indices, ]
# Define the formula for the logistic regression model
formula <- formula(train_data$label ~. )
# Run the logistic regression model
model <- glm(formula, data = train_data, family = binomial)
# Interpret the results
summary(model)
# Assuming you have the model object and test data available
# Predict on the test data
predicted_labels <- predict(model, newdata = test_data, type = "response")
